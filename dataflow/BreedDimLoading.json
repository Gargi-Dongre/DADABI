{
	"name": "BreedDimLoading",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "sourceStage"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "BreedDimMaxID"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDIM"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "sinkSnowflake"
				}
			],
			"transformations": [
				{
					"name": "sourceWithSK"
				},
				{
					"name": "aggregateBreedKeys"
				},
				{
					"name": "joinToTarget"
				},
				{
					"name": "filterExistingRows"
				},
				{
					"name": "SurrogateKey"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JobID as string (\"10\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStage",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK),0) AS MAXBreedSK FROM MYSCHEMA.BREED_DIM',",
				"     format: 'query') ~> BreedDimMaxID",
				"source(output(",
				"          BREED_SK as decimal(10,0),",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_JOB_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDIM",
				"sourceStage, BreedDimMaxID join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> sourceWithSK",
				"sourceWithSK aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
				"aggregateBreedKeys, sourceBreedDIM join(SPECIES == SPECIES_NAME",
				"     && aggregateBreedKeys@PRIMARY_BREED == sourceBreedDIM@PRIMARY_BREED",
				"     && aggregateBreedKeys@SECONDARY_BREED == sourceBreedDIM@SECONDARY_BREED,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinToTarget",
				"joinToTarget filter(isNull(SPECIES_NAME)&&isNull(sourceBreedDIM@PRIMARY_BREED)&&isNull(sourceBreedDIM@SECONDARY_BREED)) ~> filterExistingRows",
				"select1 keyGenerate(output(RowNumber as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateKey",
				"filterExistingRows select(mapColumn(",
				"          SPECIES,",
				"          PRIMARY_BREED = aggregateBreedKeys@PRIMARY_BREED,",
				"          SECONDARY_BREED = aggregateBreedKeys@SECONDARY_BREED,",
				"          MAXBREEDSK,",
				"          COUNT_ROW,",
				"          BREED_SK,",
				"          PRIMARY_BREED_NAME = sourceBreedDIM@PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = sourceBreedDIM@SECONDARY_BREED,",
				"          SPECIES_NAME,",
				"          DI_JOB_ID,",
				"          DI_JOB_DATE",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"SurrogateKey derive(BREED_SK = MAXBREEDSK + RowNumber,",
				"          DI_JOB_ID = currentTimestamp(),",
				"          DI_JOB_DATE = $JobID) ~> derivedColumn",
				"derivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          BREED_SK,",
				"          SPECIES_NAME,",
				"          DI_JOB_ID,",
				"          DI_JOB_DATE",
				"     )) ~> sinkSnowflake"
			]
		}
	}
}