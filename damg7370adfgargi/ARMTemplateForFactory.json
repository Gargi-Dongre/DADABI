{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370adfgargi"
		},
		"Snowflake_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Snowflake_LS'"
		},
		"AzureBlobStorage1_LS_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage1_LS'"
		},
		"AzureBlobStorage_LS_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage_LS'"
		},
		"AzureDataLakeStorage_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://damg7370gargi.dfs.core.windows.net/"
		},
		"AzureKeyVault_LS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://damg7370kvgargi.vault.azure.net/"
		},
		"Snowflake_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "MySnowflakeDB"
		},
		"Snowflake_LS_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "DevRole"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_NYPD_Stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "tsv_to_Snowflake",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NYPDCleansing",
								"type": "DataFlowReference",
								"parameters": {
									"JobID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceBronze": {
										"FileName": "NYPD_Arrest_Data__Year_to_Date__20250213.tsv"
									},
									"SnowflakeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/NYPDCleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_tsv_2_Parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "tsv_2_Parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Parquet_2_Snowflake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "tsv_2_Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "DI_JOB_ID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "DI_LOAD_DT",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "DELETE FROM MYSCHEMA.PET_LICENSE_STAGE",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1_LS",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "MYSCHEMA",
									"TableName": "PET_LICENSE_STAGE"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"myFileName": {
						"type": "String",
						"defaultValue": "pet_lic_data.parquet"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Snowflake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "NYPD",
					"table": "ARREST_DATA_STAGE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NYPD_Arrest_Data__Year_to_Date__20250213.tsv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_Pet_Licenses_new.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage1_LS_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_LS_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Access of storage account ",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_LS_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Access Data Factory",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_LS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Accessing snowflake",
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "ol26732.canada-central.azure",
					"user": "Gargi",
					"database": "[parameters('Snowflake_LS_properties_typeProperties_database')]",
					"warehouse": "MyWarehouse",
					"role": "[parameters('Snowflake_LS_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Snowflake_LS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NYPDCleansing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_bronze",
								"type": "DatasetReference"
							},
							"name": "SourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Snowflake",
								"type": "DatasetReference"
							},
							"name": "SnowflakeSink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumns"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"parameters{",
						"     JobID as string (\"10\")",
						"}",
						"source(output(",
						"          ARREST_KEY as integer,",
						"          ARREST_DATE as date 'MM/dd/yyyy',",
						"          PD_CD as integer,",
						"          PD_DESC as string,",
						"          KY_CD as short,",
						"          OFNS_DESC as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as short,",
						"          JURISDICTION_CODE as short,",
						"          AGE_GROUP as string,",
						"          PERP_SEX as string,",
						"          PERP_RACE as string,",
						"          X_COORD_CD as integer,",
						"          Y_COORD_CD as integer,",
						"          Latitude as double,",
						"          Longitude as double,",
						"          {New Georeferenced Column} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceBronze",
						"SourceBronze derive(PD_CD = coalesce(PD_CD, toInteger(0)),",
						"          PD_DESC = iif(PD_DESC == '(null)', 'Unknown', PD_DESC),",
						"          KY_CD = coalesce(KY_CD, toInteger(0)),",
						"          OFNS_DESC = iif(OFNS_DESC == '(null)', 'Unknown', OFNS_DESC),",
						"          LAW_CODE = iif(LAW_CODE == '(null)', 'Unknown', LAW_CODE),",
						"          LAW_CAT_CD = iif(isNull(LAW_CAT_CD) || replace(LAW_CAT_CD, ' ', '') == '(null)', 'Unknown', ",
						"    iif(LAW_CAT_CD == 'F' ||  LAW_CAT_CD == 'M' || LAW_CAT_CD == 'V',LAW_CAT_CD , 'Invalid')),",
						"          DI_JOB_ID = $JobID,",
						"          DI_Load_DT = currentDate()) ~> derivedColumns",
						"derivedColumns select(mapColumn(",
						"          ARREST_KEY,",
						"          ARREST_DATE,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          PERP_SEX,",
						"          PERP_RACE,",
						"          X_COORD_CD,",
						"          Y_COORD_CD,",
						"          DI_JOB_ID,",
						"          DI_Load_DT",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          ARREST_KEY,",
						"          ARREST_DATE,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          PERP_SEX,",
						"          PERP_RACE,",
						"          X_COORD_CD,",
						"          Y_COORD_CD,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = DI_Load_DT",
						"     )) ~> SnowflakeSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_bronze')]",
				"[concat(variables('factoryId'), '/datasets/DS_Snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SeattlePetCleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference"
							},
							"name": "sinkSnowflake"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     JobID as string (\"10\")",
						"}",
						"source(output(",
						"          License_Issue_Date as string,",
						"          License_Number as string,",
						"          Animals_Name as string,",
						"          Species as string,",
						"          Primary_Breed as string,",
						"          Secondary_Breed as string,",
						"          ZIP_Code as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(LIC_ISSUE_DATE = toDate(License_Issue_Date, 'MMMM dd yyyy'),",
						"          Secondary_Breed = iifNull(Secondary_Breed,'Unknown'),",
						"          Animals_Name = translate(Animals_Name, '() []', ''),",
						"          License_Number = toInteger(translate(License_Number, 'S', '')),",
						"          DI_JOB_ID = $JobID,",
						"          Load_Dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = Animals_Name,",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          LICENSE_ISSUE_DATE = LIC_ISSUE_DATE,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = Load_Dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectColumns",
						"selectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_NUMBER,",
						"          ANIMAL_NAME,",
						"          SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          ZIP_CODE,",
						"          LICENSE_ISSUE_DATE,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sinkSnowflake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Seattle_Pet_License')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StageDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SeattlePetCleaning",
								"type": "DataFlowReference",
								"parameters": {
									"JobID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sinkSnowflake": {
										"SchemaName": "MYSCHEMA",
										"TableName": "PET_LICENSE_STAGE"
									}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SeattlePetCleaning')]"
			]
		}
	]
}